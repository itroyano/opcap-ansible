---
- name: Gather "inventory" of packages
  hosts: localhost
  vars_files:
    - vars/skip_list.yml
  gather_facts: false
  tasks:
    - name: Only gather date_time to facts
      ansible.builtin.setup:
        filter:
          - ansible_date_time
    - name: Set current date to stats
      ansible.builtin.set_stats:
        data:
          current_date: "{{ ansible_date_time.date }}"
    - name: Get K8S cluster info
      kubernetes.core.k8s_cluster_info:
      register: ocp_version
      no_log: true
    - name: Save cluster version
      ansible.builtin.set_stats:
        data:
          k8s_cluster_version: "{{ ocp_version.version.server.kubernetes }}"
    - name: Get OpenShift cluster info
      kubernetes.core.k8s_info:
        api_version: "config.openshift.io/v1"
        kind: ClusterVersion
        name: version
      register: openshift_cluster_version
      failed_when: >
        (openshift_cluster_version.resources[0] is not defined) or
        (openshift_cluster_version.resources[0] == "")
    - name: Save OpenShift cluster info
      ansible.builtin.set_stats:
        data:
          openshift_cluster_version: "{{ openshift_cluster_version.resources[0].status.history[0].version }}"
    - name: Set cluster base URL
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: DNS
        name: cluster
      register: cluster_dns
      tags:
        - inventory
        - cleanup
    - name: Set fact
      ansible.builtin.set_fact:
        cluster_base_url: "{{ cluster_dns.resources[0].spec.baseDomain }}"
    - name: Build packages list when no packages specified
      ansible.builtin.include_tasks:
        file: packages.yml
      when: packages | default([]) | length == 0
      tags:
        - inventory
        - cleanup
    - name: Filter skip list from package list
      ansible.builtin.set_fact:
        filtered_packages: "{{ packages | rejectattr('name', 'in', skip_list) }}"
      tags:
        - inventory
        - cleanup
    - name: Build package "inventory"
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        catalog_source: "{{ item.catalog_source }}"
        catalog_source_namespace: "{{ item.catalog_source_namespace }}"
        cluster_base_url: "{{ cluster_base_url }}"
        role_name_override: "{{ item.role_name_override | default(omit) }}"
        groups: "packages"
        ansible_ssh_host: localhost
        ansible_connection: local
      tags:
        - inventory
        - cleanup
      loop: "{{ filtered_packages }}"
      when: filtered_packages | default([]) | length > 0
    - name: Fail if we have no package list at this point
      ansible.builtin.fail:
        msg: No package list available
      when: filtered_packages | default([]) | length == 0
      tags:
        - inventory
        - cleanup

- name: Run assessments
  hosts: packages
  gather_facts: false
  serial:
    - 1
    - 5
    - "{{ max_batch_size | default(10) }}"
  max_fail_percentage: 99
  pre_tasks:
    - name: Cluster base url?
      ansible.builtin.debug:
        var: cluster_base_url
    - name: Alias inventory_hostname for easier readability
      ansible.builtin.set_fact:
        package: "{{ inventory_hostname }}"
        package_role: "{{ role_name_override | default(inventory_hostname | replace('-', '_')) }}"
      tags:
        - cleanup
    - name: Get PackageManifests
      kubernetes.core.k8s_info:
        api_version: "packages.operators.coreos.com/v1"
        kind: PackageManifest
        namespace: "{{ hostvars[package]['catalog_source_namespace'] }}"
        name: "{{ package }}"
        label_selectors:
          - "catalog = {{ hostvars[package]['catalog_source'] }}"
      register: package_manifest_data
      failed_when: >
        (package_manifest_data.resources | length == 0) or
        (package_manifest_data.resources[0].status is not defined)
      tags:
        - cleanup
    - name: Set package_manifest fact
      ansible.builtin.set_fact:
        package_manifest: "{{ package_manifest_data.resources[0].status.channels |
                              selectattr('name', 'eq', package_manifest_data.resources[0].status.defaultChannel) |
                              first }}"
        package_name: "{{ package_manifest_data.resources[0].status.packageName }}"
      tags:
        - cleanup
    - name: Generate namespace prefix
      ansible.builtin.set_fact:
        install_namespace_prefix: "{{ package_name | sha1 | truncate(8, False, '', 0) }}"
      tags:
        - cleanup
  roles:
    # OwnNamespace
    - role: operator
      operator_role_mode: install
      operator_install_mode: "OwnNamespace"
      operator_install_namespace: "{{ [install_namespace_prefix, 'o'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 'o'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'OwnNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - ownnamespace
    - role: fips_assessment
      fips_assessment_install_mode: "OwnNamespace"
      fips_assessment_install_namespace: "{{ [install_namespace_prefix, 'o'] | join('-') }}"
      fips_assessment_target_namespace: "{{ [install_namespace_prefix, 'o'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'OwnNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - ownnamespace
        - fips_assessment
    - role: operator
      operator_role_mode: cleanup
      operator_install_mode: "OwnNamespece"
      operator_install_namespace: "{{ [install_namespace_prefix, 'o'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 'o'] | join('-') }}"
      when: >
        cleanup | default(true) and
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'OwnNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - ownnamespace
        - cleanup

    # SingleNamepsace
    - role: operator
      operator_role_mode: install
      operator_install_mode: "SingleNamespace"
      operator_install_namespace: "{{ [install_namespace_prefix, 's'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 's'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'SingleNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - singlenamespace
    - role: fips_assessment
      fips_assessment_install_mode: "SingleNamespace"
      fips_assessment_install_namespace: "{{ [install_namespace_prefix, 's'] | join('-') }}"
      fips_assessment_target_namespace: "{{ [install_namespace_prefix, 's', 'ns1'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'SingleNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - singlenamespace
        - fips_assessment
    - role: operator
      operator_role_mode: cleanup
      operator_install_mode: "SingleNamespece"
      operator_install_namespace: "{{ [install_namespace_prefix, 's'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 's'] | join('-') }}"
      when: >
        cleanup | default(true) and
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'SingleNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - singlenamespace
        - cleanup

    # MultiNamespace
    - role: operator
      operator_role_mode: install
      operator_install_mode: "MultiNamespace"
      operator_install_namespace: "{{ [install_namespace_prefix, 'm'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 'm'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'MultiNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - multinamespace
    - role: fips_assessment
      fips_assessment_install_mode: "MultiNamespace"
      fips_assessment_install_namespace: "{{ [install_namespace_prefix, 'm'] | join('-') }}"
      fips_assessment_target_namespace: "{{ [install_namespace_prefix, 'm', 'ns1'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'MultiNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - multinamespace
        - fips_assessment
    - role: operator
      operator_role_mode: cleanup
      operator_install_mode: "MultiNamespece"
      operator_install_namespace: "{{ [install_namespace_prefix, 'm'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 'm'] | join('-') }}"
      when: >
        cleanup | default(true) and
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'MultiNamespace') |
        selectattr('supported', 'eq', true)
      tags:
        - multinamespace
        - cleanup

    # AllNamespaces
    - role: operator
      operator_role_mode: install
      operator_install_mode: "AllNamespaces"
      operator_install_namespace: "{{ [install_namespace_prefix, 'a'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 'a'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'AllNamespaces') |
        selectattr('supported', 'eq', true)
      tags:
        - allnamespaces
    - role: fips_assessment
      fips_assessment_install_mode: "AllNamespaces"
      fips_assessment_install_namespace: "{{ [install_namespace_prefix, 'a'] | join('-') }}"
      fips_assessment_target_namespace: "{{ [install_namespace_prefix, 'a', 'ns1'] | join('-') }}"
      when: >
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'AllNamespaces') |
        selectattr('supported', 'eq', true)
      tags:
        - allnamespaces
        - fips_assessment
    - role: operator
      operator_role_mode: cleanup
      operator_install_mode: "AllNamespeces"
      operator_install_namespace: "{{ [install_namespace_prefix, 'a'] | join('-') }}"
      operator_target_namespace: "{{ [install_namespace_prefix, 'a'] | join('-') }}"
      when: >
        cleanup | default(true) and
        package_manifest.currentCSVDesc.installModes |
        selectattr('type', 'eq', 'AllNamespaces') |
        selectattr('supported', 'eq', true)
      tags:
        - allnamespaces
        - cleanup
